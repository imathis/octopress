<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>James Ottaway</title>
  <link href="http://blog.james.ottaway.mp/atom.xml" rel="self"/>
  <link href="http://blog.james.ottaway.mp/"/>
  <updated>2011-09-25T13:15:53+10:00</updated>
  <id>http://blog.james.ottaway.mp/</id>
  <author>
    <name>James Ottaway</name>
    
      <email>james@ottaway.mp</email>
    
  </author>

  
  <entry>
    <title>Bootstrapping Personal Babushka Deps</title>
    <link href="http://blog.james.ottaway.mp/2011/09/22/bootstrapping-personal-babushka-deps/"/>
    <updated>2011-09-22T08:10:00+10:00</updated>
    <id>http://blog.james.ottaway.mp/2011/09/22/bootstrapping-personal-babushka-deps</id>
    <content type="html">&lt;p&gt;I have recently been pushing the envelope of what I use &lt;a href=&quot;http://babushka.me/&quot;&gt;Babushka&lt;/a&gt; towards the vicinity of provisioning everything I need for my personal and work machines. To this effect, I am running Babushka on fresh installs of both OS X Lion and Ubuntu 11.04.&lt;/p&gt;

&lt;p&gt;As you can imagine, the first thing I do is install Babushka. That all works great, but my next step is to run something like &lt;code&gt;babushka dev-natty&lt;/code&gt;. Unfortunately, this fresh machine doesn&amp;#8217;t have my personal deps on it, and I don&amp;#8217;t want to keep running all of my personal deps like &lt;code&gt;babushka jamesottaway:dev-natty&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I could go and create a new public/private SSH key pair, log into Github, give it my new public key, and then clone by &lt;code&gt;babushka-deps&lt;/code&gt; repo. But why can&amp;#8217;t Babushka do it for me?&lt;/p&gt;

&lt;p&gt;The solution is to write a few deps that manage those steps above, and which I can run by prefixing my Github username to the dep (ie. &lt;code&gt;babushka jamesottaway:bootstrap&lt;/code&gt;). If you aren&amp;#8217;t familiar with this convention in Babushka, read the &lt;a href=&quot;http://babushka.me/sharing&quot;&gt;Sharing&lt;/a&gt; page to understand what I mean.&lt;/p&gt;

&lt;p&gt;The first dep ensures that I have a public/private key pair.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#8217;https://gist.github.com/1234192.js?file=ssh.rb&#8217;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;dep &#8216;ssh keys&#8217; do
  setup { define_var :ssh_dir, :message =&amp;gt; &#8216;Where do your SSH keys live? &#8216;, :default =&amp;gt; &#8216;~/.ssh&#8217; }
  met? { (var(:ssh_dir) / &#8216;id_rsa.pub&#8217;).exists? &amp;amp;&amp;amp; (var(:ssh_dir) / &#8216;id_rsa&#8217;).exists? }
  prepare { define_var :ssh_password, :message =&amp;gt; &#8216;What passphrase do you want to encrypt your SSH keys with?&#8217; }
  meet { shell &amp;quot;ssh-keygen -t rsa -N #{var :ssh_password} -f #{var :ssh_dir}/id_rsa&amp;quot; }
end&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;


&lt;p&gt;The next dep ensures I can push and pull from Github.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#8217;https://gist.github.com/1234192.js?file=github.rb&#8217;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;dep &#8216;github has my public key&#8217; do
  requires &#8216;ssh keys&#8217;
  define_var :github_username, :message =&amp;gt; &#8216;What is your GitHub username?&#8217;
  define_var :github_password, :message =&amp;gt; &#8216;What is your GitHub password?&#8217;
  met? { raw_shell(&#8216;ssh -T git@github.com 2&amp;gt;&amp;amp;1&#8217;).stdout[&#8216;successfully authenticated&#8217;] }
  prepare {
    set :hostname, shell(&#8216;hostname&#8217;)
    set :public_key, shell(&#8216;cat ~/.ssh/id_rsa.pub&#8217;)
    set :github_api, &#8216;https://api.github.com&#8217;
  }
  meet {
    auth = &amp;quot;#{var :github_username}:#{var :github_password}&amp;quot;
    args = &amp;quot;{\&amp;quot;title\&amp;quot;: \&amp;quot;#{var :hostname}\&amp;quot;, \&amp;quot;key\&amp;quot;: \&amp;quot;#{var :public_key}\&amp;quot;}&amp;quot;
    shell &amp;quot;curl -u &#8216;#{auth}&#8217; -d &#8216;#{args}&#8217; #{var :github_api}/user/keys&amp;quot;
  }
end&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;


&lt;p&gt;And the final dep will clone my Babushka deps repo into &lt;code&gt;~/.babushka/deps&lt;/code&gt;, as well as alias the main dep to give it a shorter name.&lt;/p&gt;

&lt;div&gt;&lt;script src=&#8217;https://gist.github.com/1234192.js?file=bootstrap.rb&#8217;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;dep &#8216;babushka deps cloned&#8217; do
  requires &#8216;github has my public key&#8217;
  setup {
    set :babushka_deps_dir, &#8216;~/.babushka/deps&#8217;.to_fancypath
    define_var :github_username, :message =&amp;gt; &#8216;What is your GitHub username?&#8217;
    define_var :babushka_deps_repo_name, :message =&amp;gt; &#8216;What is your Babushka deps repo called?&#8217;, :default =&amp;gt; &#8216;babushka-deps&#8217;
    set :babushka_deps_repo, &amp;quot;git@github.com:#{var :github_username}/#{var :babushka_deps_repo_name}.git&amp;quot;
  }
  met? { var(:babushka_deps_dir).directory? &amp;amp;&amp;amp; shell(&amp;quot;(cd #{var :babushka_deps_dir} &amp;amp;&amp;amp; git remote -v)&amp;quot;)[var :babushka_deps_repo] }
  meet { shell &amp;quot;git clone #{var :babushka_deps_repo} #{var :babushka_deps_dir}&amp;quot; }
end

dep &#8216;bootstap&#8217; do
  requires &#8216;babushka deps cloned&#8217;
end&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;


&lt;p&gt;The end result: &lt;code&gt;babushka jamesottaway:bootstrap&lt;/code&gt; will get me up and ready to edit and run my personal deps without any further messing around.&lt;/p&gt;
</content>
  </entry>
  
</feed>
