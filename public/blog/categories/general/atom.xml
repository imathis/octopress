<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General | Avi Tzurel]]></title>
  <link href="http://avi.io/blog/categories/general/atom.xml" rel="self"/>
  <link href="http://avi.io/"/>
  <updated>2013-12-03T22:58:59+02:00</updated>
  <id>http://avi.io/</id>
  <author>
    <name><![CDATA[Avi Tzurel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upload folder to S3 recursively]]></title>
    <link href="http://avi.io/blog/2013/12/03/upload-folder-to-s3-recursively/"/>
    <updated>2013-12-03T19:46:00+02:00</updated>
    <id>http://avi.io/blog/2013/12/03/upload-folder-to-s3-recursively</id>
    <content type="html"><![CDATA[<p>Lately, I needed to upload a folder to S3 with all of it's files.</p>

<p>The use-case is compiling assets on the CI and then uploading it to S3 for the CDN to consume.</p>

<p>While searching for a gem that does it I encountered <a href="https://github.com/chrishein/s3_uploader">s3_uploader</a>, but I really didn't like it because it's using Fog.</p>

<p>Generally, I don't like gems that use other gems for no apparent reason, there's absolutely no reason to include fog in my project just to upload files recursively.</p>

<p>I did however, like that it's using multi threads in order to do the upload so I am doing the same in my solution.</p>

<p>I wrote a solution that uses the aws-s3 Ruby SDK, which was already included in my project anyway.</p>

<p>Here's the code:</p>

<p>```ruby</p>

<pre><code>class S3FolderUpload
  attr_reader :folder_path, :total_files, :bucket, :s3_connection
  attr_accessor :files

  # Initialize the upload class
  #
  # folder_path - path to the folder that you want to upload
  # bucket - The bucket you want to upload to
  # aws_key - Your key generated by AWS defaults to the environemt setting AWS_KEY_ID
  # aws_secret - The secret generated by AWS
  #
  # Examples
  #   =&gt; uploader = S3FolderUpload.new("some_route/test_folder", 'your_bucket_name')
  #
  def initialize(folder_path, bucket, aws_key = ENV['AWS_KEY_ID'], aws_secret = ENV['AWS_SECRET'])
    @folder_path       = folder_path
    @bucket            = bucket
    @files             = Dir.glob("#{folder_path}/**/*")
    @total_files       = files.length
    @s3_connection     = AWS::S3.new(:access_key_id =&gt; aws_key,
                                    :secret_access_key =&gt; aws_secret)
  end

  # public: Upload files from the folder to S3
  #
  # thread_count - How many threads you want to use (defaults to 5)
  #
  # Examples
  #   =&gt; uploader.upload!(20)
  #     true
  #   =&gt; uploader.upload!
  #     true
  #
  # Returns true when finished the process
  def upload!(thread_count = 5)
    file_number = 0
    mutex       = Mutex.new
    threads     = []

    thread_count.times do |i|
      threads[i] = Thread.new {
        until files.empty?
          mutex.synchronize do
            file_number += 1
            Thread.current["file_number"] = file_number
          end
          file = files.pop rescue nil
          next unless file

          # I had some more manipulation here figuring out the git sha
          # For the sake of the example, we'll leave it simple
          #
          path = file

          puts "[#{Thread.current["file_number"]}/#{total_files}] uploading..."
          data = File.open(file)
          next if File.directory? data

          puts "Path: #{path}"
          obj = s3_connection.buckets[bucket].objects[path]
          obj.write(data, {})
        end
      }
    end
    threads.each { |t| t.join }
  end
end
</code></pre>

<p>```</p>

<p>The usage is really simple</p>

<p>```ruby</p>

<pre><code>uploader = S3FolderUpload.new('folder_name', 'your_bucket', aws_key, aws_secret)
uploader.upload!
</code></pre>

<p>```</p>

<p>Since it's using Threads, the upload is really fast, both from local machines and from servers.</p>

<p>Have fun coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move jobs from one queue to another - Sidekiq]]></title>
    <link href="http://avi.io/blog/2013/08/14/move-jobs-from-one-queue-to-another-sidekiq/"/>
    <updated>2013-08-14T17:36:00+03:00</updated>
    <id>http://avi.io/blog/2013/08/14/move-jobs-from-one-queue-to-another-sidekiq</id>
    <content type="html"><![CDATA[<p>I have been working with Sidekiq for quite a while now, having many jobs per day working (multiple millions of jobs.)</p>

<p>Sometimes, I queue up tasks to a queue called <code>#{queue_name}_pending</code>, I do this so I can manage the load on the servers. (For example: Stop writing to Mongo, Stop importing contact etc...)</p>

<p>This way, I can queue up many jobs, and I can move it to the real queue whenever I feel like it or whenever the problem is solved.</p>

<p>I was looking for a way to move tasks from one queue to another.</p>

<p>There's nothing built into Sidekiq for this, but obviously, you can just use redis built in commands to do it.</p>

<p>Here's the code to do it</p>

<p>```ruby</p>

<pre><code>count_block = proc{ Sidekiq.redis do |conn|
  conn.llen("queue:#{queue_name}")  
end }

while count_block.call &gt; 0
  Sidekiq.redis do |conn|
    conn.rpoplpush "queue:#{queue_name}_pending", "queue:#{queue_name}"
  end
end
</code></pre>

<p>```</p>

<p>This will move all the items from one queue to another until there are no more jobs.</p>

<p>b.t.w
Obviously, the <code>_pending</code> queues don't have any workers assigned to them, the purpose of it is a place holder so the jobs won't go to waste and we can resume work when we can.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[organizing your specs into groups and running them separately]]></title>
    <link href="http://avi.io/blog/2012/08/19/organizing-your-specs-into-groups-and-running-them-separately/"/>
    <updated>2012-08-19T13:57:00+03:00</updated>
    <id>http://avi.io/blog/2012/08/19/organizing-your-specs-into-groups-and-running-them-separately</id>
    <content type="html"><![CDATA[<p>A while back I answered <a href="http://stackoverflow.com/questions/10029250/organizing-rspec-2-tests-into-unit-and-integration-categories-in-rails/10029504#10029504">this StackOverflow question</a>.</p>

<p>When you have a lot of specs, it makes sense to run them in separate logical groups and not just with <code>rspec spec</code> or something like that.</p>

<p>This way, you can save time and you can also run them in separate processes on the CI.</p>

<p>For example:</p>

<p><code>
bundle exec rake spec:unit
bundle exec rake spec:integration
bundle exec rake spec:api
</code></p>

<p>In order to achieve this, you need to change the <code>spec.rake</code> file.</p>

<p>```ruby
  namespace :spec do</p>

<pre><code>Rspec::Core::RakeTask.new(:unit) do |t|
  t.pattern = Dir['spec/*/**/*_spec.rb'].reject{ |f| f['/api/v1'] || f['/integration'] }
end
</code></pre>

<p>   Rspec::Core::RakeTask.new(:api) do |t|</p>

<pre><code>  t.pattern = "spec/*/{api/v1}*/**/*_spec.rb"
end

Rspec::Core::RakeTask.new(:integration) do |t|
  t.pattern = "spec/integration/**/*_spec.rb"
end
</code></pre>

<p>  end
```
You can continue customizing that all you want, you can run specific specs that are the most important to you.</p>

<p>I find those groups useful for most of my use cases, but with minor changes you can make it fit yours</p>

<h3>Using Rspec Tags</h3>

<p>You can use tags for that as well, but I find that more tedious and you can forget to <em>tag</em> something.</p>

<p>For example:</p>

<p><code>ruby
  it "should do some integration test", :integration =&gt; true do
   # something
  end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[searching through the history of commands you ran in terminal]]></title>
    <link href="http://avi.io/blog/2012/08/09/searching-through-the-history-of-commands-you-ran-in-terminal/"/>
    <updated>2012-08-09T00:06:00+03:00</updated>
    <id>http://avi.io/blog/2012/08/09/searching-through-the-history-of-commands-you-ran-in-terminal</id>
    <content type="html"><![CDATA[<p>Whenever I am logged in to a server or even when I am working on my own machine, I keep searching through the command history through up and down arrows.</p>

<p>While this can be efficient if you have 2-3 commands, it can be quite frustrating to find specific commands.</p>

<p>That is something I keep doing over and over again, and now I have a better way, I just grep through the list of commands, find the one I want, copy it and paste it into a new command, and I'm done.</p>

<p>This saves me <strong>a lot</strong> of time.</p>

<p>Here's how:</p>

<p>To show the history of commands you just do:</p>

<p><code>
history
</code></p>

<p>You probably know the rest, but you can just pipe the history into grep and search your history</p>

<p><code>
history | grep {command_or_part_of_command}
</code></p>

<p>For example:</p>

<p><code>
history | grep cp -R
</code></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[problem with running spec in vim]]></title>
    <link href="http://avi.io/blog/2012/08/05/problem-with-running-spec-in-vim/"/>
    <updated>2012-08-05T22:02:00+03:00</updated>
    <id>http://avi.io/blog/2012/08/05/problem-with-running-spec-in-vim</id>
    <content type="html"><![CDATA[<p>I have been using Vim for almost a week now.</p>

<p>I am using the <a href="http://github.com/astrails/dotvim">dotvim</a> configuration by <a href="http://astrails.com">Astrails</a>.</p>

<p>All in all, the configuration is awesome and I completely love it, it's the longest time period I have ever used Vim. Considering that the second place is about 5 minutes, that's super impressive.</p>

<p>I only have one problem with it.</p>

<p>I took the spec running functions from <a href="https://github.com/garybernhardt">Gary Bernhardt</a> <a href="https://github.com/garybernhardt/dotfiles/">dotfiles</a>, I just remapped the keys differently.</p>

<p>```
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>' :call RunTestFile()<cr>
map <leader>; :call RunNearestTest()<cr></p>

<p>function! RunTestFile(...)</p>

<pre><code>if a:0
    let command_suffix = a:1
else
    let command_suffix = ""
endif

" Run the tests for the previously-marked file.
let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
if in_test_file
    call SetTestFile()
elseif !exists("t:grb_test_file")
    return
end
call RunTests(t:grb_test_file . command_suffix)
</code></pre>

<p>endfunction</p>

<p>function! RunNearestTest()</p>

<pre><code>let spec_line_number = line('.')
call RunTestFile(":" . spec_line_number . " -b")
</code></pre>

<p>endfunction</p>

<p>function! SetTestFile()</p>

<pre><code>" Set the spec file that tests will be run for.
let t:grb_test_file=@%
</code></pre>

<p>endfunction</p>

<p>function! RunTests(filename)</p>

<pre><code>" Write the file and run tests for the given filename
:w
:silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
:silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
:silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
:silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
:silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
:silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
if match(a:filename, '\.feature$') != -1
    exec ":!script/features " . a:filename
else
    if filereadable("script/test")
        exec ":!script/test " . a:filename
    elseif filereadable("Gemfile")
        exec ":!bundle exec rspec --color " . a:filename
    else
        exec ":!rspec --color " . a:filename
    end
end
</code></pre>

<p>endfunction
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
```</p>

<p>As you can see, I mapped <code>,;</code> to run line specs, and <code>,'</code> to run the entire spec file.</p>

<p>The problem is, that the terminal exists immediately after the result, does not wait for me to hit <code>Enter</code> or anything.</p>

<p>You can see the problem demo in this YouTube Video</p>

<p><iframe width="" height="" src="http://www.youtube.com/embed/gUB48XwNq0M " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<p>I asked this question on StackOverflow <a href="http://stackoverflow.com/questions/11785035/vim-issue-with-running-specs-in-ruby-rspec/11785791#11785791">here</a></p>

<p>Someone suggested it might be a trailing character, but I checked and there's nothing like that.</p>

<p>The same person suggested to map just <code>ls</code> like so:</p>

<p><code>
nmap &lt;leader&gt;ls :!ls&lt;cr&gt;
</code></p>

<p>But this command does not exit.</p>

<p>Another thing I tried is this
In a vim session I mapped a key like this</p>

<p><code>
map &lt;Leader&gt;~ :!rspec %&lt;cr&gt;
</code></p>

<p>When I used it, the terminal did not exit as well.</p>

<p>Vim Experts, what am I missing here?</p>

<p>Running specs all the time is something crucial to my workflow, I don't want to hide vim very time, it breaks my flow.</p>

<p>Any help appreciated.</p>

<p>My entire vim configuration is here: <a href="http://www.github.com/kensodev/dotvim">link</a></p>
]]></content>
  </entry>
  
</feed>
